<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tank Level Control</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
        }
        .tank-container {
            width: 150px;
            height: 300px;
            position: relative;
            border: 4px solid #4a5568;
            border-radius: 8px;
            overflow: hidden;
            display: flex;
            flex-direction: column-reverse;
            box-shadow: inset 0 0 15px rgba(0,0,0,0.2);
            background-color: #e2e8f0;
        }
        .liquid {
            width: 100%;
            background-color: #66b2ff;
            transition: height 0.5s ease-out;
            border-top: 4px solid #66b2ff;
        }
        .pid-line {
            width: 100%;
            height: 2px;
            background-color: red;
            position: absolute;
            z-index: 10;
        }
        .flow-indicator {
            width: 30px;
            height: 30px;
            background-color: #e2e8f0;
            border: 2px solid #4a5568;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }
        .flow-indicator.on {
            background-color: #48bb78; /* Green */
        }
        .flow-indicator svg {
            fill: #4a5568;
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen p-4">

    <div class="bg-white p-8 rounded-2xl shadow-xl max-w-4xl w-full flex flex-col lg:flex-row gap-8 items-center lg:items-start">
        <!-- Control Panel -->
        <div class="flex-1 w-full lg:w-auto">
            <h1 class="text-3xl font-bold text-center mb-6 text-gray-800">Tank Level Control</h1>
            
            <div class="space-y-6">
                <!-- Setpoint Control -->
                <div class="bg-gray-50 p-6 rounded-xl shadow-inner">
                    <label for="setpoint-slider" class="block text-xl font-medium text-gray-700 mb-2">Setpoint: <span id="setpoint-display" class="font-bold text-blue-600">50%</span></label>
                    <input type="range" id="setpoint-slider" min="0" max="100" value="50" class="w-full h-2 bg-gray-300 rounded-lg appearance-none cursor-pointer">
                </div>

                <!-- PID Tuning Parameters -->
                <div class="bg-gray-50 p-6 rounded-xl shadow-inner grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                        <label for="kp-input" class="block text-sm font-medium text-gray-700">Kp</label>
                        <input type="number" id="kp-input" value="2.5" step="0.1" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                    </div>
                    <div>
                        <label for="ki-input" class="block text-sm font-medium text-gray-700">Ki</label>
                        <input type="number" id="ki-input" value="0.1" step="0.01" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                    </div>
                    <div>
                        <label for="kd-input" class="block text-sm font-medium text-gray-700">Kd</label>
                        <input type="number" id="kd-input" value="0.2" step="0.01" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                    </div>
                </div>

                <!-- Process Values Display -->
                <div class="bg-gray-50 p-6 rounded-xl shadow-inner grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <p class="text-sm font-medium text-gray-700">Current Level (PV)</p>
                        <span id="pv-display" class="text-3xl font-bold text-blue-600">50.0%</span>
                    </div>
                    <div>
                        <p class="text-sm font-medium text-gray-700">PID Output</p>
                        <span id="pid-output-display" class="text-3xl font-bold text-purple-600">0.0%</span>
                    </div>
                    <div>
                        <p class="text-sm font-medium text-gray-700">Pump Speed</p>
                        <span id="pump-display" class="text-3xl font-bold text-green-600">0.0%</span>
                    </div>
                    <div>
                        <p class="text-sm font-medium text-gray-700">Valve Opening</p>
                        <span id="valve-display" class="text-3xl font-bold text-orange-600">0.0%</span>
                    </div>
                </div>

                <!-- Alarm Status -->
                <div class="bg-gray-50 p-6 rounded-xl shadow-inner text-center">
                    <p class="text-sm font-medium text-gray-700">Alarm Status</p>
                    <div class="mt-2 flex justify-center items-center gap-4">
                        <span id="low-alarm" class="px-4 py-2 rounded-full text-white font-bold bg-gray-400">Low</span>
                        <span id="high-alarm" class="px-4 py-2 rounded-full text-white font-bold bg-gray-400">High</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tank Visualization -->
        <div class="flex-1 flex flex-col items-center gap-6 w-full lg:w-auto mt-8 lg:mt-0">
            <!-- Pump and Valve Indicators -->
            <div class="flex justify-between w-full max-w-[150px]">
                <div id="in-flow" class="flex flex-col items-center">
                    <p class="text-xs font-semibold text-gray-600 mb-1">Pump</p>
                    <div class="flow-indicator">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="h-6 w-6"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 15v-4H8v-2h3V8h2v3h3v2h-3v4h-2z"/></svg>
                    </div>
                </div>
                <div id="out-flow" class="flex flex-col items-center">
                    <p class="text-xs font-semibold text-gray-600 mb-1">Valve</p>
                    <div class="flow-indicator">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="h-6 w-6"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 15v-4H8v-2h3V8h2v3h3v2h-3v4h-2z"/></svg>
                    </div>
                </div>
            </div>

            <!-- The Tank -->
            <div class="tank-container">
                <div id="pid-line" class="pid-line" style="bottom: 50%;"></div>
                <div id="liquid" class="liquid" style="height: 50%;"></div>
            </div>
        </div>
    </div>

    <script>
        // DOM Elements
        const setpointSlider = document.getElementById('setpoint-slider');
        const setpointDisplay = document.getElementById('setpoint-display');
        const pvDisplay = document.getElementById('pv-display');
        const pidOutputDisplay = document.getElementById('pid-output-display');
        const pumpDisplay = document.getElementById('pump-display');
        const valveDisplay = document.getElementById('valve-display');
        const kpInput = document.getElementById('kp-input');
        const kiInput = document.getElementById('ki-input');
        const kdInput = document.getElementById('kd-input');
        const liquidElement = document.getElementById('liquid');
        const pidLineElement = document.getElementById('pid-line');
        const highAlarm = document.getElementById('high-alarm');
        const lowAlarm = document.getElementById('low-alarm');
        const inFlowIndicator = document.getElementById('in-flow').querySelector('.flow-indicator');
        const outFlowIndicator = document.getElementById('out-flow').querySelector('.flow-indicator');

        // PID Variables
        let setpoint = parseFloat(setpointSlider.value);
        let currentLevel = 50.0;
        let error = 0.0;
        let integralSum = 0.0;
        let lastError = 0.0;
        let dt = 0.1; // Time step for simulation
        
        // PID gains from inputs
        let Kp = parseFloat(kpInput.value);
        let Ki = parseFloat(kiInput.value);
        let Kd = parseFloat(kdInput.value);

        // Simulation parameters
        const maxFlow = 5.0; // Max flow rate
        let inFlow = 0.0;
        let outFlow = 0.0;

        // Event Listeners
        setpointSlider.addEventListener('input', (e) => {
            setpoint = parseFloat(e.target.value);
            setpointDisplay.textContent = `${setpoint.toFixed(0)}%`;
            pidLineElement.style.bottom = `${setpoint}%`;
        });

        kpInput.addEventListener('change', (e) => { Kp = parseFloat(e.target.value); });
        kiInput.addEventListener('change', (e) => { Ki = parseFloat(e.target.value); });
        kdInput.addEventListener('change', (e) => { Kd = parseFloat(e.target.value); });

        // PID Control Loop
        function pidControl() {
            // 1. Calculate Error
            error = setpoint - currentLevel;

            // 2. Calculate Integral Term
            integralSum += error * dt;
            // Anti-windup clamping
            integralSum = Math.max(-200, Math.min(200, integralSum));

            // 3. Calculate Derivative Term
            const derivative = (error - lastError) / dt;

            // 4. Calculate PID Output
            let pidOutput = (Kp * error) + (Ki * integralSum) + (Kd * derivative);
            
            // Clamp PID output to a safe range
            pidOutput = Math.max(-100, Math.min(100, pidOutput));
            
            // Update last error for the next cycle
            lastError = error;

            return pidOutput;
        }

        // Main Simulation Loop
        function simulateTankLevel() {
            // Calculate PID output
            const pidOutput = pidControl();

            // Map PID output to pump and valve
            let pumpSpeed = 0;
            let valveOpening = 0;
            if (pidOutput > 0) {
                // If positive, activate pump
                pumpSpeed = pidOutput;
                valveOpening = 0; // Valve is closed
            } else {
                // If negative, activate valve
                pumpSpeed = 0; // Pump is off
                valveOpening = Math.abs(pidOutput);
            }

            // Simulate fluid flow
            inFlow = (pumpSpeed / 100) * maxFlow;
            outFlow = (valveOpening / 100) * maxFlow;
            currentLevel += (inFlow - outFlow) * dt;

            // Clamp level to tank boundaries
            currentLevel = Math.max(0, Math.min(100, currentLevel));

            // Update UI
            liquidElement.style.height = `${currentLevel}%`;
            pvDisplay.textContent = `${currentLevel.toFixed(1)}%`;
            pidOutputDisplay.textContent = `${pidOutput.toFixed(1)}%`;
            pumpDisplay.textContent = `${pumpSpeed.toFixed(1)}%`;
            valveDisplay.textContent = `${valveOpening.toFixed(1)}%`;
            
            // Update flow indicators
            inFlowIndicator.classList.toggle('on', pumpSpeed > 0);
            outFlowIndicator.classList.toggle('on', valveOpening > 0);

            // Alarm Logic
            if (currentLevel >= 95.0) {
                highAlarm.classList.remove('bg-gray-400');
                highAlarm.classList.add('bg-red-500');
                pumpSpeed = 0; // Emergency shutdown of pump
            } else {
                highAlarm.classList.remove('bg-red-500');
                highAlarm.classList.add('bg-gray-400');
            }

            if (currentLevel <= 5.0) {
                lowAlarm.classList.remove('bg-gray-400');
                lowAlarm.classList.add('bg-red-500');
                valveOpening = 0; // Emergency closure of valve
            } else {
                lowAlarm.classList.remove('bg-red-500');
                lowAlarm.classList.add('bg-gray-400');
            }

            requestAnimationFrame(simulateTankLevel);
        }

        // Start the simulation
        simulateTankLevel();
    </script>
</body>
</html>
